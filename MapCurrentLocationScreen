//Localização do Utilizador

import 'dart:async';
import 'dart:ffi';
import 'package:flutter/material.dart';
import 'package:geolocator/geolocator.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:flutter/cupertino.dart';

class MapCurrentLocationScreen extends StatefulWidget{
  const MapCurrentLocationScreen({Key? key}) : super(key: key);

  @override
  _MapCurrentLocationScreenState createState() => _MapCurrentLocationScreenState();
}

class _MapCurrentLocationScreenState extends State<MapCurrentLocationScreen>{
  late GoogleMapController googleMapController;
  static const CameraPosition initialCameraPosition = CameraPosition(target:LatLng(37.019356, -7.930440), zoom: 11);

  Set<Marker> markers = {};

  @override
  Widget build(BuildContext context){
   return Scaffold(
     appBar: AppBar(
       title: Text("Your current location",
           style: TextStyle(color: Colors.white)),
       centerTitle: true,
       backgroundColor: Colors.teal,
       leading: IconButton(
         onPressed: () {
           Navigator.pop(context);
         },
         icon: Icon(Icons.arrow_back_rounded,
           size: 20,
           color: Colors.white,),
       ),
     ),
     body: GoogleMap(initialCameraPosition:  initialCameraPosition,
        markers: markers,
        zoomControlsEnabled: false,
        mapType: MapType.normal,
        onMapCreated: (GoogleMapController controller){
            googleMapController = controller;

        },


     ),
     floatingActionButton: FloatingActionButton.extended(
         onPressed: () async {
           Position position = await _determinePosition();

           googleMapController.animateCamera(CameraUpdate.newCameraPosition(CameraPosition(target: LatLng(position.latitude,position.longitude),zoom: 11)));
           
          markers.clear();
           markers.add(Marker(markerId: const MarkerId('currentLocation'),position: LatLng(position.latitude,position.longitude)));

           setState(() {

           });

         },
         label: const Text("Current Location"),
         icon: const Icon(Icons.location_history),
     ),
   );
  }

  Future<Position> _determinePosition() async {

    bool serviceEnabled;
    LocationPermission permission;

    serviceEnabled = await Geolocator.isLocationServiceEnabled();

    if(!serviceEnabled){
      return Future.error('Location services are disabled');
    }

    permission = await Geolocator.checkPermission();

      if(permission == LocationPermission.denied) {
        permission == await Geolocator.requestPermission();

        if(permission == LocationPermission.denied){
          return Future.error("Location permission denied");
        }
      }

      if(permission == LocationPermission.deniedForever){
        return Future.error("Location permissions are permanently denied");
      }

      Position position = await Geolocator.getCurrentPosition();

      return position;

    }
  }
